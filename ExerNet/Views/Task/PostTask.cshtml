@using Exernet;
@model Exernet.Models.ExernetTask
<!DOCTYPE html>
<html lang="en">
@{
    ViewBag.Title = "PostTask";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<head>
    <title>@Model.Title</title>

</head>
<body>
    <div class="container">
        <div class="row">
            <div class="col-md-8">
                <h1>@Model.Title</h1>
                <div id="TaskId" hidden>@Model.Id</div>
                <div class="row">
                    <div class="col-md-8">
                        <p class="lead">
                            @Resources.Resource.By @Html.ActionLink(Model.User.UserName, "Details", "User", routeValues: new { id = Model.User.UserName }, htmlAttributes: new { title = String.Format("{0} account page", Model.User.UserName) })
                            <span class="glyphicon glyphicon-star"></span> @Model.User.Rating
                        </p>
                    </div>
                    <div class="col-md-4" align="right">
                        @foreach (var str in Model.Tags.Select(obj => obj.Text))
                        {
                            <a href="http://localhost:54084/Task/ShowTags?tag=@str" class="label label-primary">@str</a>
                        }
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-8">
                        <div><p><span class="glyphicon glyphicon-time"></span> @Resources.Resource.PostedOn @Model.UploadDate </p></div>
                    </div>
                    <div class="col-md-4" align="right">
                        <div><p><span class="glyphicon glyphicon-fire"></span> @Resources.Category.CategoryOfTask: @Model.Category  </p></div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6">
                        @if (User.Identity.IsAuthenticated && Model.User.UserName.Equals(User.Identity.Name) || User.IsInRole("Administrator"))
                        {
                            <div class="row">
                                @Html.ActionLink(Resources.Resource.Edit, "EditTask", "Task", routeValues: new { id = Model.Id }, htmlAttributes: new { title = @Resources.Resource.Edit, @class = "btn btn-default btn-xs" })
                            </div><div class="row">
                                @Html.ActionLink(Resources.Resource.BlockThisTask, "BlockTask", "Task", routeValues: new { id = Model.Id }, htmlAttributes: new { title = @Resources.Resource.BlockThisTask, @class = "btn btn-default btn-xs" })
                            </div>
                        }
                        @if (User.Identity.IsAuthenticated && !Model.User.UserName.Equals(User.Identity.Name))
                        {<div class="row">
                            @Html.Partial("_EmailBox", Model)
                        </div>}
                    </div>
                    @if (Model.Block)
                    {
                        <div class="col-md-6" align=right>
                            @if (User.Identity.IsAuthenticated)
                            {
                                @Ajax.ActionLink(" ", "SetLike", new { id = Model.Id, likeState = true }, new AjaxOptions { UpdateTargetId = "SetLike" }, new { @class = "glyphicon glyphicon-thumbs-up" })
                            }
                            <div id="SetLike">
                                @{ Html.RenderPartial("/Views/Task/SetLike.cshtml", Model); }
                            </div>
                            @if (User.Identity.IsAuthenticated)
                            {
                                @Ajax.ActionLink(" ", "SetLike", new { id = Model.Id, likeState = false }, new AjaxOptions { UpdateTargetId = "SetLike" }, new { @class = "glyphicon glyphicon-thumbs-down" })
                            }
                        </div>
                    }
                    else
                    {
                        <div class="col-md-6" align=right>
                            <span class="glyphicon glyphicon-heart-empty"></span>@{ Html.RenderPartial("/Views/Task/SetLike.cshtml", Model); }
                        </div>
                    }
                </div>

                <hr />

                <div class="row">
                    <div class="col-md-12 img img-responsive" style="word-break: break-all; width:inherit">
                        <p class="img-responsive">@Html.Raw(System.Web.HttpUtility.HtmlDecode(@MarkdownHelper.Markdown(Model.Text)))</p>
                    </div>
                </div>
                <hr />

                <div class="row form-group">
                    @Html.Partial("_ShowFormulasWithZoom", Model.Formulas)
                </div>

                @if (Model.Videos.Count > 0)
                {
                    <div class="embed-responsive embed-responsive-16by9">
                        @foreach (var str in Model.Videos.Select(obj => obj.VideoURL))
                        {
                            <iframe class="embed-responsive-item" src=@str frameborder="0" allowfullscreen></iframe>

                        }
                    </div>
                    <hr />
                }
                <div class="row form-group">
                    @Html.Partial("_ShowImagesWithZoom", Model.Images)
                </div>
                @if (Model.Chart != null)
                {
                    <hr>
                    <div class="row" id="chart1" style="height:200px;width:300px;"></div>
                    <textarea hidden="" id="expression">@Model.Chart.Expression</textarea>
                    <textarea hidden="" id="from">@Model.Chart.From</textarea>
                    <textarea hidden="" id="to">@Model.Chart.To</textarea>
                    <textarea hidden="" id="step">@Model.Chart.Step</textarea>
                }
                @if (Model.Block && User.Identity.IsAuthenticated)
                {
                    <hr>
                    <div class=" form-group">
                        @Html.Action("CheckSolve", "Task", new { id = Model.Id })
                    </div>

                    using (Ajax.BeginForm("LeaveComment", new { id = Model.Id }, new AjaxOptions
                        {
                            UpdateTargetId = "commentAdding",
                            InsertionMode = InsertionMode.InsertBefore,
                            OnComplete = "removeTextFromCommentTextbox"
                        }))
                    {
                        <div class="well">
                            <h4>@Resources.Resource.LeaveComment:</h4>
                            <form role="form">
                                <div class="form-group">
                                    <textarea style="resize:none" id="textareaComment" class="form-control" name="commentText" rows="3"></textarea>
                                </div>
                                <button type="submit" value="Comment" class="btn btn-primary">@Resources.Resource.Submit</button>
                            </form>
                        </div>
                    }

                }
                <div id="commentAdding">
                </div>
                <div id="commentslist">
                    @{Html.RenderAction("ViewListOfComments", "Task", new { Model = Model.Comments });}
                    <div id="loadmoreajaxloader" style="display:none;"><center><img src="~/Scripts/ajax-loader.gif" /></center></div>
                </div>
            </div>
            <div class="col-md-4">
                <div id="GetTag">
                    @Html.Action("GetTag", "Task")
                </div>
                <div class="panel panel-info">
                    <div class="panel-heading">
                        <h3 class="panel-title">@Resources.Resource.UsersThatSolved</h3>
                    </div>
                    <div class="panel-body">
                        @Html.Action("ShowUsersForTask", "User", Model.Id)
                    </div>
                </div>

            </div>
        </div>
    </div>
</body>
</html>

<script src="~/Scripts/jqPlot/jquery.jqplot.js" type="text/javascript"></script>
<script src="~/Scripts/jqPlot/plugins/jqplot.canvasTextRenderer.min.js" type="text/javascript"></script>
<script src="~/Scripts/jqPlot/plugins/jqplot.canvasAxisLabelRenderer.min.js" type="text/javascript"></script>
<script src="~/Scripts/parser.js" type="text/javascript"></script>
<script src="~/Scripts/infinite-comments.js" type="text/javascript"></script>
<script type="text/javascript" src="~/Scripts/build-graph2.js"></script>

<script type="text/javascript">
    function removeTextFromCommentTextbox() {
        $("#textareaComment").val('');
    }
</script>